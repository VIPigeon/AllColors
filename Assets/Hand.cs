using UnityEngine;
using System.Collections.Generic;

public class Hand : MonoBehaviour {
    // –í—å—é—à–∫–∞ (üëÄ) —Å–º–µ—à–∞–ª–∞—Å—å —Å –º–æ–¥–µ–ª—å—é (ü§ñ). –ê —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ê –≤—ã –∫–∞–∫ –¥—É–º–∞–µ—Ç–µ?
    public List<CardView> CardViews;

    public const int CountCardsInHand = 5;
    public List<Card> Cards;
    public List<Card> Deck;
    public Card DefaultCard;

    public void FillFrom(FullDeck fullDeck) {
        foreach (Card card in fullDeck.Cards) {
            Deck.Add(card);
        }

        Shuffle(Deck);

        for (int i = 0; i < CountCardsInHand; i++) {
            Cards.Add(DrawOneCardFromDeck());
        }

        ShowCards();
    }

    public void PlayCard(CardView cardView) {
        if (Cards.Count != CountCardsInHand) {
            Debug.LogError("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∫–∞—Ä—Ç –º–µ–Ω—å—à–µ, —á–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å.");
            return;
        }

        ReplaceCardFromHandWithCardFromDeck(cardView);
        ShowCards();
    }

    private void ReplaceCardFromHandWithCardFromDeck(CardView cardView) {
        int indexOfCardInHand = -1;
        for (int i = 0; i < CountCardsInHand; i++) {
            if (cardView == CardViews[i]) {
                indexOfCardInHand = i;
            }
        }

        if (indexOfCardInHand == -1) {
            Debug.LogError("–ë—ã–ª–∞ —Å—ã–≥—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç—É –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞. –¢–∞–∫ –Ω–µ–ª—å–∑—è.");
            return;
        }

        // Virgin   ü§ìüò≠ -- –ê—Å–∏–º–ø–æ—Ç–∏–∫–∞ O(n)!!! –ï—Å—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö!
        // Gigachad üòéüï∂ -- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è
        Cards.RemoveAt(indexOfCardInHand);
        Cards.Insert(indexOfCardInHand, DrawOneCardFromDeck());
    }

    private Card DrawOneCardFromDeck() {
        if (Deck.Count > 0) {
            Card card = Deck[Deck.Count - 1];
            Deck.RemoveAt(Deck.Count - 1);
            return card;
        } else {
            return DefaultCard;
        }
    }

    private void ShowCards() {
        for (int i = 0; i < CountCardsInHand; i++) {
            CardViews[i].Show(Cards[i]);
        }
    }

    // –≠—Ç–æ –º–æ–π –ª—é–±–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–º–µ—à–∫–∏ ü•ä
    private void Shuffle(List<Card> cards) {
        for (int i = 0; i < cards.Count; i++) {
            int j = Random.Range(i, cards.Count);
            (cards[i], cards[j]) = (cards[j], cards[i]);
        }
    }
}