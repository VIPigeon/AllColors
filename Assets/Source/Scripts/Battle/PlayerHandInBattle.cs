using System;
using System.Collections.Generic;
using UnityEngine;

public class PlayerHandInBattle : MonoBehaviour {
    public const int CardsThatPlayerHasInHand = 5;
    
    // –í—å—é—à–∫–∞ (üëÄ) —Å–º–µ—à–∞–ª–∞—Å—å —Å –º–æ–¥–µ–ª—å—é (ü§ñ). –ê —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ê –≤—ã –∫–∞–∫ –¥—É–º–∞–µ—Ç–µ?
    public List<CardView> CardViews;
    
    public HandAndDeckOfCards Hand;
    public bool OutOfCards { get; private set; }
    
    public event Action<Card> CardPlayed;

    public void Construct(FullDeck fullDeck) {
        Hand = new HandAndDeckOfCards(fullDeck, CardsThatPlayerHasInHand);
        ShowCards();
    }
    
    // ... –ø—Ä–∏—á–∏–Ω–∞ 72 –ø–æ—á–µ–º—É –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –∏–≤–µ–Ω—Ç—ã:
    private void OnEnable() {
        foreach (CardView cardView in CardViews) {
            cardView.Played += OnCardViewPlayed;
        }
    }
    
    private void OnDisable() {
        foreach (CardView cardView in CardViews) {
            cardView.Played -= OnCardViewPlayed;
        }
    }
    
    public void ReturnCard(Card card) {
        int insertionIndex = -1;
        for (int i = 0; i < Hand.MaxCardsInHand; i++) {
            if (Hand.Hand[i] == null) {
                insertionIndex = i;
                break;
            }
        }
        if (insertionIndex == -1) {
            Debug.LogError("–°—É–ø–µ—Ä –ø–ª–æ—Ö–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ kawaii-Code");
            return;
        }
        Hand.Hand[insertionIndex] = card;
        ShowCards();
    }
    
    public void Refill() {
        Hand.RefillHand();
        ShowCards();
    }
    
    private void OnCardViewPlayed(CardView cardView) {
        // –Ø —Ä–µ–∞–ª—å–Ω–æ –Ω–µ –∑–Ω–∞—é, –∫—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∏ –∑–∞—á–µ–º —è –ø–∏—à—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –°–æ –≤—Å–µ—Ö
        // —Å—Ç–æ—Ä–æ–Ω –º–Ω–µ –≥–æ–≤–æ—Ä—è—Ç —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã, –æ–Ω–∏ –∑–∞—Å–æ—Ä—è—é—Ç –∫–æ–¥ –∏ –±—ã—Å—Ç—Ä–æ —É—Å—Ç–∞—Ä–µ–≤–∞—é—Ç.
        // –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: —É–¥–µ–ª –¥–∂—É–Ω–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤/—à–∫–æ–ª—å–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç
        // –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö (üëÄ). –í—Å–µ –≤–æ–∫—Ä—É–≥ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —è –Ω–µ–ø—Ä–∞–≤. –ß—Ç–æ –º–Ω–µ —Å—Ç–æ–∏—Ç
        // –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–Ω—è—Ç—å—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º. –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω! ‚úä
        //
        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–∑–±–∞–≤–ª—è—é—Ç —Å—É—Ö–æ–π, –±–µ–∑–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–≥–∏–π, –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç—Å—è
        // –∫–æ–¥. –û–Ω–∏ –Ω–∞–ø–æ–Ω–∏–º–∞—é—Ç, —á—Ç–æ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∫–æ–≥–¥–∞-—Ç–æ —Å—Ç—É–ø–∞–ª —á–µ–ª–æ–≤–µ–∫. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–∏–º–æ–∫
        // –∏—Å—Ç–æ—Ä–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—à–ª–æ–º—É. –Ø –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é, –∫–∞–∫ —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ –ª–µ—Ç –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ
        // –Ω–∞–π–¥—É—Ç —ç—Ç–æ—Ç –∫–æ–¥ –∏ –±—É–¥—É—Ç —á–∏—Ç–∞—Ç—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –†–∞–¥–∏ —ç—Ç–æ–≥–æ —è –∏—Ö –∏ –ø–∏—à—É. –ù—É, —á—Ç–æ–±—ã –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ
        // —á–∏—Ç–∞–ª–∏. üëΩ  –î–∞... –í–æ—Ç —Ç–∞–∫.
        //
        // –ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
        // 
        // > –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∑–¥–µ—Å—å, –Ω–æ —É–∂–µ 22 —á–∞—Å–∞ –Ω–æ—á–∏, –∞ —è –≤ –ø–æ–µ–∑–¥–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å
        // > –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é (–∏–ª–∏ 3-–∏–π), –∫–æ—Ä–æ—á–µ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, —Å–∞–º–∏ –ø–æ—Ç–æ–º –ø–æ—á–∏–Ω–∏—Ç–µ
        // > –∏–ª–∏ –ø–æ–¥—É–º–∞–π—Ç–µ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ üòú
        // > 
        // > –£–∂–µ 23 —á–∞—Å–∞ –Ω–æ—á–∏, –∏ —è —ç—Ç–æ –ø–æ—á–∏–Ω–∏–ª. –û—Å—Ç–∞–≤–ª—é –∑–¥–µ—Å—å —Ä–∞–¥–∏ –∏—Å—Ç–æ—Ä–∏–∏.
        // > 
        // > –°–µ–π—á–∞—Å –ø–æ–ª–Ω–æ—á—å, —á—Ç–æ-—Ç–æ –º–Ω–µ –Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—é–¥–∞ –≤—å—é—à–∫—É,
        // > –Ω–æ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –º–Ω–µ –ø–æ—Ñ–∏–≥. –ú—ã –∂–µ –Ω–∞ –¥–∂–µ–º –∏–≥—Ä—É –¥–µ–ª–∞–µ–º. –î–∞ –∏ –≤–æ–æ–±—â–µ,
        // > —Ö–æ—á—É –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –∫–æ–¥ –ø–∏—Å–∞—Ç—å. –≠—Ö—Ö—Ö... üòõ
        
        // ü§ìüò≠ Virgin -- –ò—Å–ø–æ–ª—å–∑—É–π CardViews.Find()!!! –¢–∞–∫ –∫–æ–¥ –±—É–¥–µ—Ç –∫–æ—Ä–æ—á–µ –∏ —á–∏—Ç–∞–µ–º–µ–π!! –ò–ª–∏ LINQ
        // üòéüï∂ Gigachad -- for
        int indexOfPlayedCard = -1;
        for (int i = 0; i < Hand.MaxCardsInHand; i++) {
            if (cardView == CardViews[i]) {
                indexOfPlayedCard = i;
            }
        }
        
        // –£ –º–µ–Ω—è –∫–∞–∫–∞—è-—Ç–æ —á—É–¥–æ–≤–∏—â–Ω–∞—è –Ω–µ–ø—Ä–∏—è–∑–Ω—å –∫ –∏–≤–µ–Ω—Ç–∞–º. –í–æ—Ç –∫–æ–≥–¥–∞ —è –ø–∏—à—É –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ,
        // –≤–µ—Å—å —ç—Ç–æ—Ç —Ç—Ä—ç—à –Ω–µ –Ω—É–∂–µ–Ω. –ê –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç—É–ø–∞—é —Å–≤–æ–∏–º –∫—Ä–æ—Å—Å–æ–≤–∫–æ–º –≤ –≥—Ä—è–∑–Ω–æ–µ –±–æ–ª–æ—Ç–æ ü¶¢
        // –û–û–ü, —Ç–∞–∫ —Å—Ä–∞–∑—É –≤—ã–ª–µ–∑–∞–µ—Ç —ç—Ç–∞ —Ö—Ä–µ–Ω—å.
        Card card = Hand.PlayCard(indexOfPlayedCard);
        CardViews[indexOfPlayedCard].InteractionsDisabled = true;
        
        CardPlayed?.Invoke(card);
        ShowCards();
    }
    
    private void ShowCards() {
        OutOfCards = true;
        
        for (int i = 0; i < Hand.MaxCardsInHand; i++) {
            if (Hand.Hand[i] != null) {
                OutOfCards = false;
                CardViews[i].InteractionsDisabled = false;   
            }
        }
        
        for (int i = 0; i < Hand.MaxCardsInHand; i++) {
            CardViews[i].Show(Hand.Hand[i]);
        }
    }
}