using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

// –ï—Å—Ç—å –±–∞–≥–∏: –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç—å –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∞—Ç–∞–∫—É / –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ.
// –ù—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ‚ùåüóΩ
//
// –ü–æ —Ö–æ—Ä–æ—à–µ–º—É –º—ã —Å–ø–∞–≤–Ω–∏–º –±–æ–π —á–µ—Ä–µ–∑ Instantiate –∏ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º
// –≤ –Ω–µ–≥–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è. –≠—Ç–æ —Ç–æ –∫–∞–∫ —è –≤–∏–∂—É üñå
public class Fight : MonoBehaviour {
    // –î–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:
    // FightArea -- parent,
    // PlayerPokemonSpawnPoint -- –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ FightArea
    public GameObject FightArea;
    public Transform PlayerPokemonSpawnPoint;
    public Transform EnemyPokemonSpawnPoint;

    public FightState State;
    public PlayerHandInBattle PlayerHand;
    public EnemyAI Enemy;

    public Pokemon PlayerPokemon;
    public Pokemon EnemyPokemon;
    
    public Button AttackButton;
    public Button SecondaryAttackButton; // –ö–æ—Ç–æ—Ä–∞—è –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∑–∞—á–µ–º

    private void Start() {
        State = FightState.WaitingForEnemyToSpawnPokemon;
        DoEnemyTurn();
        State = FightState.WaitingForPlayerToSpawnHisFirstPokemon;
        PlayerHand.Construct(Singleton<FullDeck>.Instance);
    }
    
    private void OnEnable() {
        PlayerHand.CardPlayed += OnPlayerCardPlayed;
    }
    
    private void OnDisable() {
        PlayerHand.CardPlayed -= OnPlayerCardPlayed;
    }
    
    private void Update() {
        // –Ø –ø–∏—à—É –∫–æ–¥ –≤ Notepad++ üòã, —Ç—É—Ç –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫. –ê —á—Ç–æ –¥–µ–ª–∞—Ç—å?
        // JetBrains —É—à–ª–∏ –∏–∑ –†–æ—Å—Å–∏–∏ ü§¨. –ê –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ? –¢–∞–∫ –∏ –∂–∏–≤—ë–º. ü§ê
        if (State != FightState.PlayerTurn) {
            AttackButton.interactable = false;
            SecondaryAttackButton.interactable = false;
        } else {
            AttackButton.interactable = true;
            SecondaryAttackButton.interactable = true;
        }
        
        if ((PlayerPokemon == null || PlayerPokemon.Card.CurrentHealth.IsZero) && PlayerHand.OutOfCards) {
            Debug.Log("–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª –∞—Ö–∞—Ö–∞—Ö");
            SceneManager.LoadScene("Overworld");
        }
    }

    public void SwapPlayerPokemon(Pokemon newPokemon) {
        switch (State) {
            case FightState.WaitingForPlayerToSpawnHisFirstPokemon:
                PlayerPokemon = newPokemon;
                State = FightState.PlayerTurn;
                break;
            case FightState.PlayerTurn:
                PlayerHand.ReturnCard(PlayerPokemon.Card);
                Destroy(PlayerPokemon.gameObject);
                PlayerPokemon = newPokemon;
                break;
            case FightState.EnemyTurn:
                Debug.LogWarning("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞");
                break;
            default:
                Debug.LogError("–ß—Ç–æ –∑–∞ —Å—Ç–µ–π—Ç?");
                break;
        }
    }

    private void OnPlayerCardPlayed(Card card) {
        if (card.Config.Type.IsSpell()) {
            switch (card.Config.Type) {
                case CardType.Hellfire:
                    EnemyPokemon.TakeDamage(5, card);
                    break;
                case CardType.Snow:
                    EnemyPokemon.AddEffect(EffectType.Snow, 2);
                    break;
                case CardType.Depression:
                    EnemyPokemon.AddEffect(EffectType.Depression, 1);
                    break;
                case CardType.Radioactive:
                    EnemyPokemon.AddEffect(EffectType.Poisoned, 3);
                    break;
                case CardType.PurpleHeart:
                    PlayerPokemon.Card.CurrentHealth.Restore();
                    break;
                default:
                    Debug.LogError($"–•—Ä–µ–Ω—å {card.Config.Type}");
                    break;
            }
            SwitchTurnToEnemy();
        } else {
            Pokemon pokemon = Instantiate(card.Config.Pokemon, FightArea.transform);
            pokemon.Construct(card);
            pokemon.transform.position = PlayerPokemonSpawnPoint.position;
            SwapPlayerPokemon(pokemon);
        }
    }
    
    public void PlayerPressedTheAttackButton() {
        EnemyPokemon.ReadyToAttack += OnEnemyReadyToAttack;
        PlayerPokemon.Attack(EnemyPokemon);
        PlayerHand.Refill();
        SwitchTurnToEnemy();
    }
    
    public void SwitchTurnToPlayer() {
        if (EnemyPokemon != null) {
            EnemyPokemon.EndTurn();
        }
        if (PlayerPokemon != null) {
            PlayerPokemon.BeginTurn();
        }
        
        if (PlayerPokemon.Card.CurrentHealth.IsZero) {
            State = FightState.WaitingForPlayerToSpawnHisFirstPokemon;
        } else {
            State = FightState.PlayerTurn;
        }
    }
    
    public void OnEnemyReadyToAttack(Pokemon enemy) {
        EnemyPokemon.ReadyToAttack -= OnEnemyReadyToAttack;
        DoEnemyTurn();
        SwitchTurnToPlayer();
    }
    
    private void DoEnemyTurn() {
        if (EnemyPokemon != null && EnemyPokemon.HasEffect(EffectType.Depression)) {
            SwitchTurnToPlayer();
            return;
        }
        
        EnemyTurn turn = Enemy.DoTurn(EnemyPokemon, PlayerPokemon);
        switch (turn.Type) {
            case EnemyTurnType.Attack:
                EnemyPokemon.Attack(PlayerPokemon);
                break;
            case EnemyTurnType.PlayCard:
                Card card = turn.Card;
                Pokemon pokemon = Instantiate(card.Config.Pokemon, FightArea.transform);
                pokemon.Construct(card);
                pokemon.transform.position = EnemyPokemonSpawnPoint.position;
                SwapEnemyPokemon(pokemon);
                if (PlayerPokemon != null) {
                    EnemyPokemon.Attack(PlayerPokemon);
                }
                break;
            case EnemyTurnType.GiveUp:
                Debug.Log($"–í—Ä–∞–≥ {Enemy.CharacterID} –ø—Ä–æ–∏–≥—Ä–∞–ª. –ö—Ä—É—Ç–æ?");
                Singleton<NPCState>.Instance.States[Enemy.CharacterID] = CharacterState.Defeated;
                SceneManager.LoadScene("Overworld");
                break;
            default:
                Debug.LogError($"–ù–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ö–æ–¥ {turn.Type}!");
                break;
        }
    }
    
    private void SwapEnemyPokemon(Pokemon newPokemon) {
        switch (State) {
            case FightState.WaitingForEnemyToSpawnPokemon:
                EnemyPokemon = newPokemon;
                break;
            case FightState.EnemyTurn:
                Enemy.ReturnCard(EnemyPokemon.Card);
                Destroy(EnemyPokemon.gameObject);
                EnemyPokemon = newPokemon;
                break;
            default:
                Debug.LogError($"–ü–ª–æ—Ö–æ–π —Å—Ç–µ–π—Ç: {State}");
                break;
        }
    }
    
    public void SwitchTurnToEnemy() {
        if (PlayerPokemon != null) {
            PlayerPokemon.EndTurn();
        }
        if (EnemyPokemon != null) {
            EnemyPokemon.BeginTurn();
        }
        
        if (EnemyPokemon == null || EnemyPokemon.Card.CurrentHealth.IsZero) {
            State = FightState.WaitingForEnemyToSpawnPokemon;
        } else {
            State = FightState.EnemyTurn;
        }
    }
}
