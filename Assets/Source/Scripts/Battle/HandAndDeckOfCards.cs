using UnityEngine;
using System.Collections.Generic;

public class HandAndDeckOfCards {
    public List<Card> Hand;
    public List<Card> Deck;
    public int MaxCardsInHand;
    
    public HandAndDeckOfCards(FullDeck fullDeck, int maxCardsInHand) {
        Construct(fullDeck.Cards, maxCardsInHand);
    }
    
    // –ö—Ä–∏–Ω–∂.. üò∂ –°–∏–Ω–≥–ª—Ç–æ–Ω –º–æ–º–µ–Ω—Ç (–º–æ–∂–Ω–æ –±—ã–ª–æ —á—É—Ç—å-—á—É—Ç—å –ø–æ–ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —Ö—Ä–µ–Ω—å –±—ã–ª–∞ –±—ã)
    public HandAndDeckOfCards(FullDeckForOthers fullDeck, int maxCardsInHand) {
        Construct(fullDeck.Cards, maxCardsInHand);
    }
    
    private void Construct(List<CardConfig> cards, int maxCardsInHand) {
        Deck = new List<Card>();
        Hand = new List<Card>();
        MaxCardsInHand = maxCardsInHand;
        
        foreach (CardConfig cardConfig in cards) {
            if (cardConfig.Name != "–ü–∏–ø–µ—Ç–∫–∞") {
                Deck.Add(new Card(cardConfig));
            }
        }
        
        Shuffle(Deck);
        
        for (int i = 0; i < MaxCardsInHand; i++) {
            Hand.Add(DrawOneCardFromDeck());
        }
    }
    
    public void RefillHand() {
        for (int i = 0; i < MaxCardsInHand; i++) {
            if (Hand[i] == null) {
                // –ú–æ–∂–Ω–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–≤–∏–Ω–µ—Ä —Å—é–¥–∞ –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é
                // –¥–æ—Å—Ç–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
                Hand[i] = DrawOneCardFromDeck();
            }
        }
    }
    
    public Card PlayRandomCard() {
        int maxAttempts = 10;
        int attempt = 0;
        int randomIndex = -1;
        while (attempt < maxAttempts) {
            randomIndex = Random.Range(0, Hand.Count);
            if (Hand[randomIndex] != null) {
                break;
            }
            attempt += 1;
        }
        Card card = Hand[randomIndex];
        PlayCard(randomIndex);
        return card;
    }
    
    public Card PlayCard(int cardIndex) {
        if (Hand.Count != MaxCardsInHand) {
            Debug.LogError("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∫–∞—Ä—Ç –º–µ–Ω—å—à–µ, —á–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å.");
            return null;
        }
        Card result = Hand[cardIndex];
        Hand[cardIndex] = null;
        return result;
    }
    
    private Card DrawOneCardFromDeck() {
        if (Deck.Count > 0) {
            Card card = Deck[Deck.Count - 1];
            Deck.RemoveAt(Deck.Count - 1);
            return card;
        } else {
            return null;
        }
    }
    
    // –≠—Ç–æ –º–æ–π –ª—é–±–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–º–µ—à–∫–∏ ü•ä
    public void Shuffle(List<Card> cards) {
        for (int i = 0; i < cards.Count; i++) {
            int j = UnityEngine.Random.Range(i, cards.Count);
            (cards[i], cards[j]) = (cards[j], cards[i]);
        }
    }
}